$schema: "http://support.riverbed.com/apis/service_def/2.1"
id: "http://support.riverbed.com/apis/basic/1.0"
provider: "riverbed"
name: "basic"
version: "1.0"
title: "REST API for a book catalog"

types:
   t:
      type: object
      properties:
         t1: { type: number }
         t2: { type: string }

resources:
   x:
      type: number
      example: 5
      links:
         self: { path: '$/x' }
         get:
            method: GET
            response: { $ref: '#/resources/x' }
         set:
            method: PUT
            request: { $ref: '#/resources/x' }
            response: { $ref: '#/resources/x' }

         action:
            method: POST
            request:
               type: number
            response:
               type: number
            path: '$/x/action'

         action2:
            method: GET
            response: { $ref: '#/types/t' }
            path: '$/x/action2'

   button:
      type: 'null'
      relations:
         x:
            resource: '#/resources/x'
      links:
         self:
            path: '$/button'
         press:
            method: POST
            request:
               type: object
               properties:
                  pressure: { type: number }
            response:
               type: object
               properties:
                  pushback: { type: boolean }

   items:
      type: array
      items:
         type: number
         relations:
            full:
               resource: '#/resources/item'
               vars: { id: '0' }

      links:
         self:
            path: '$/items'
            params:
               category: { type: number }
               min_price: { type: number }
               max_price: { type: number }
               label: { type: string }

         get:
            method: GET
            response: { $ref: '#/resources/items' }

         create:
            method: POST
            request: { $ref: '#/resources/item' }
            response: { $ref: '#/resources/item' }

   fullitems:
      type: array
      items:
         $ref: '#/resources/item'

      links:
         self: { path: '$/fullitems' }

         get:
            method: GET
            response: { $ref: '#/resources/fullitems' }

   fullitems_with_full:
      type: array
      items:
         $ref: '#/resources/item'
         relations:
            full:
               resource: '#/resources/item'
               vars:
                  id: '0/id'
      links:
         self: { path: '$/fullitems_with_full' }

         get:
            method: GET
            response: { $ref: '#/resources/fullitems_with_full' }

   item:
      type: object
      properties:
         id: { type: number }
         label: { type: string }
         price: { type: number }
         category: { type: number }

      links:
         self: { path: '$/items/{id}' }
         get:
            method: GET
            response: { $ref: '#/resources/item' }

         set:
            method: PUT
            request: { $ref: '#/resources/item' }
            response: { $ref: '#/resources/item' }

         delete:
            method: DELETE

   categories:
      type: array
      items:
         type: number
         relations:
            full:
               resource: '#/resources/category'
               vars: { id: '0' }

      links:
         self:
            path: '$/categories'
            params:
               label: { type: string }
         get:
            method: GET
            response: { $ref: '#/resources/categories' }

         create:
            method: POST
            request: { $ref: '#/resources/category' }
            response: { $ref: '#/resources/category' }

   category:
      type: object
      properties:
         id: { type: number }
         label: { type: string }

      links:
         self: { path: '$/categories/{id}' }
         get:
            method: GET
            response: { $ref: '#/resources/category' }

         set:
            method: PUT
            request: { $ref: '#/resources/category' }
            response: { $ref: '#/resources/category' }

         purchase:
            method: POST
            path: '$/categories/{id}/purchase'

      relations:
         items:
            resource: '#/resources/items'
            vars: { category: '0/id' }
