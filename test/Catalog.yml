restSchemaVersion: "2.0"
name: "catalog"
version: "1.0"
title: "REST API for a book catalog"
servicePath: "/api/catalog/1.0"
defaultAuthorization: "required"
types:
   address:
      type: object
      id: address
        
      properties:
         street: 
            type: string
            description: "Street Address"
         city:
            type: string
            description: "City" 
         state:
            type: string
            description: "State" 
            pattern: "[A-Z][A-Z]"
         zip: 
            type: string
            description: "Zip Code (5-digit)" 
            pattern: "[0-9][0-9][0-9][0-9][0-9]"

resources:
   info:
      type: object
      properties: 
         owner: { type: string }
         email: { type: string }

      links:
         self: { path: "$/info" }
         get:  
            method: GET
            response: { $ref: info }
         set:
            method: PUT
            request: { $ref: info }
            response: { $ref: info }
         
      relations:
         books: { resource: books }
         authors: { resource: authors }

   authors:
      type: array
      items: { $ref: author }

      links:
         self: { path: "$/authors" }
         get:  
            method: GET
            response: { $ref: authors }
         create:
            method: POST
            request: { $ref: author }
            response: { $ref: author }


   author:
      type: object
      properties:
         id: { type: integer }
         name: { type: string }

      links: 
         self: { path: "$/authors/{id}" }
         get:  
            method: GET
            response: { $ref: author }
         set:
            method: PUT
            request: { $ref: author }
            response: { $ref: author }
         delete:
            method: DELETE

      relations:
         books:
            resource: books
            vars: { author: "0/id" }

         instances: { resource: authors }

   publishers:
      type: array
      items: { $ref: publisher }

      links:
         self: { path: "$/publishers" }
         get:  
            method: GET
            response: { $ref: publishers }
         create:
            method: POST
            request: { $ref: publisher }
            response: { $ref: publisher }

   publisher:
      type: object
      properties:
         id: { type: integer }
         name: { type: string }
         billing_address: { $ref: address }
         
      links:
         self: { path: "$/publishers/{id}" }

         get:  
            method: GET
            response: { $ref: publisher }
            
      relations:
         instances: { resource: publishers }

   books:
      type: array
      items: 
         type: object
         properties:
            id: { type: integer, readOnly: true }
            publisher_id: { type: integer }
            title: { type: string }

         relations:
            full:
               # Build a book link from the 'id' property
               resource: book
               vars:
                  id: "0/id" # this array item, 'id' property

            publisher:
               # Build a book link from the 'id' property
               resource: publisher
               vars:
                  id: "0/publisher_id" # this array item, 'id' property

      links:
      
         self: 
            path: "$/books"
            params: 
               # Allow filtering by id or title
               author: { type: integer }
               title: { type: string }

         get: 
            method: GET
            response: { $ref: books }

         create:
            method: POST
            request: { $ref: book }
            response: { $ref: book }

   book:
      description: A book object
      example: 
         id: 100
         title: My first book
         publisher_id: 5
         author_ids: [ 1, 2 ]
         chapters:
            - num: 1
              heading: Introduction
            - num: 2
              heading: Conclusion
      type: object
      properties:
         id: { type: integer }
         title: { type: string }
         publisher_id: { type: integer }
         author_ids: 
            type: array
            items: 
               id: author_id
               type: integer
               relations:
                  full:
                     resource: author
                     vars: { id: "0" }

         chapters: 
            type: array
            items: 
               type: object
               properties: 
                  num: { type: integer }
                  heading: { type: string }
                  
               relations:
                  full:
                     resource: book_chapter
                     vars:
                        bookid: "2/id" # go up two-levels, then "id"
                        num: "0/num" # this array item, then "num"

      links:
         self: { path: "$/books/{id}" }

         get:  
            method: GET
            response: { $ref: book }
         set:
            method: PUT
            request: { $ref: book }
            response: { $ref: book }
         delete:
            method: DELETE

         purchase:
            path: "$/books/{id}/purchase"
            method: POST
            request:
               type: object
               properties:
                  num_copies: { type: integer }
                  shipping_address: { $ref: address }

            response:
               type: object
               properties:
                  delivery_date: { type: string }
                  final_cost: { type: number }

         new_chapter:
            path: "$/books/{id}/chapter"
            method: POST
            request: { $ref: book_chapter }
            response: { $ref: book_chapter }

      relations:
         instances: { resource: books }
         publisher: 
            resource: publisher
            vars: { id: "0/publisher_id" }

   book_chapter:
      type: object
      properties:
         bookid: { type: integer }
         num: { type: integer }
         heading: { type: string }

      links:
         self: { path: "$/books/{bookid}/chapters/{num}" }

         get:  
            method: GET
            response: { $ref: info }
         set:
            method: PUT
            request: { $ref: info }
            response: { $ref: info }

         get_text:
            method: GET
            path: "$/books/{bookid}/chapter/{num}/text"
            response: { type: string }

         set_text:
            method: PUT
            path: "$/books/{bookid}/chapter/{num}/text"
            request: { type: string }
            response: { type: string }

      relations:
         book: 
            resource: book
            vars: { id: "0/bookid" }

