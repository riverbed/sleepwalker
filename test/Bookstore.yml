$schema: "http://support.riverbed.com/apis/service_def/2.2"
id: "http://support.riverbed.com/apis/bookstore/1.0"
provider: "riverbed"
name: "bookstore"
version: "1.0"
title: "REST API for a book bookstore"
defaultAuthorization: "required"
types:
   address:
      type: object
      additionalProperties: false
      properties:
         street:
            type: string
            description: "Street Address"
         city:
            type: string
            description: "City"
         state:
            type: string
            description: "State"
            pattern: "[A-Z][A-Z]"
         zip:
            type: string
            description: "Zip Code (5-digit)"
            pattern: "[0-9][0-9][0-9][0-9][0-9]"

resources:
   info:
      type: object

      additionalProperties: false
      properties:
         owner: { type: string }
         email: { type: string }

      links:
         self: { path: "$/info" }
         get:
            method: GET
            response: { $ref: '#/resources/info' }
         set:
            method: PUT
            request: { $ref: '#/resources/info' }
            response: { $ref: '#/resources/info' }

      relations:
         books: { resource: '#/resources/books' }
         authors: { resource: '#/resources/authors' }

   authors:
      type: array
      items: { $ref: '#/resources/author' }

      links:
         self: { path: "$/authors" }
         get:
            method: GET
            response: { $ref: '#/resources/authors' }
         create:
            method: POST
            request: { $ref: '#/resources/author' }
            response: { $ref: '#/resources/author' }


   author:
      type: object
      additionalProperties: true
      properties:
         id: { type: integer }
         name: { type: string }

      links:
         self: { path: "$/authors/{id}" }
         get:
            method: GET
            response: { $ref: '#/resources/author' }
         set:
            method: PUT
            request: { $ref: '#/resources/author' }
            response: { $ref: '#/resources/author' }
         delete:
            method: DELETE

      relations:
         books:
            resource: '#/resources/books'
            vars: { author: "0/id" }

         instances: { resource: '#/resources/authors' }

   publishers:
      type: array
      items: { $ref: '#/resources/publisher' }

      links:
         self: { path: "$/publishers" }
         get:
            method: GET
            response: { $ref: '#/resources/publishers' }
         create:
            method: POST
            request: { $ref: '#/resources/publisher' }
            response: { $ref: '#/resources/publisher' }

   publisher:
      type: object
      additionalProperties: false
      properties:
         id: { type: integer }
         name: { type: string }
         billing_address: { $ref: '#/types/address' }

      links:
         self: { path: "$/publishers/{id}" }

         get:
            method: GET
            response: { $ref: '#/resources/publisher' }

      relations:
         instances: { resource: '#/resources/publishers' }

   books:
      type: array
      items:
         type: object
         additionalProperties: false
         properties:
            id: { type: integer, readOnly: true }
            publisher_id: { type: integer }
            title: { type: string }

         relations:
            full:
               # Build a book link from the 'id' property
               resource: '#/resources/book'
               vars:
                  id: "0/id" # this array item, 'id' property

            publisher:
               # Build a book link from the 'id' property
               resource: '#/resources/publisher'
               vars:
                  id: "0/publisher_id" # this array item, 'id' property

      links:

         self:
            path: "$/books"
            params:
               # Allow filtering by id or title
               author: { type: integer }
               title: { type: string }

         get:
            method: GET
            response: { $ref: '#/resources/books' }

         create:
            method: POST
            request: { $ref: '#/resources/book' }
            response: { $ref: '#/resources/book' }

   book:
      description: A book object
      example:
         id: 100
         title: My first book
         publisher_id: 5
         author_ids: [ 1, 2 ]
         chapters:
            - num: 1
              heading: Introduction
            - num: 2
              heading: Conclusion
      type: object
      additionalProperties: false
      properties:
         id: { type: integer }
         title: { type: string }
         publisher_id: { type: integer }
         author_ids:
            type: array
            items:
               label: author_id
               type: integer
               relations:
                  full:
                     resource: '#/resources/author'
                     vars: { id: "0" }

         chapters:
            type: array
            items:
               type: object
               additionalProperties: false
               properties:
                  num: { type: integer }
                  heading: { type: string }

               relations:
                  full:
                     resource: '#/resources/book_chapter'
                     vars:
                        bookid: "2/id" # go up two-levels, then "id"
                        num: "0/num" # this array item, then "num"

      links:
         self: { path: "$/books/{id}" }

         get:
            method: GET
            response: { $ref: '#/resources/book' }
         set:
            method: PUT
            request: { $ref: '#/resources/book' }
            response: { $ref: '#/resources/book' }
         delete:
            method: DELETE

         purchase:
            path: "$/books/{id}/purchase"
            method: POST
            request:
               type: object
               additionalProperties: false
               properties:
                  num_copies: { type: integer }
                  shipping_address: { $ref: '#/types/address' }

            response:
               type: object
               additionalProperties: false
               properties:
                  delivery_date: { type: string }
                  final_cost: { type: number }

         new_chapter:
            path: "$/books/{id}/chapter"
            method: POST
            request: { $ref: '#/resources/book_chapter' }
            response: { $ref: '#/resources/book_chapter' }

      relations:
         instances: { resource: '#/resources/books' }
         publisher:
            resource: '#/resources/publisher'
            vars: { id: "0/publisher_id" }

   book_chapter:
      type: object
      additionalProperties: false
      properties:
         bookid: { type: integer }
         num: { type: integer }
         heading: { type: string }

      links:
         self: { path: "$/books/{bookid}/chapters/{num}" }

         get:
            method: GET
            response: { $ref: '#/resources/info' }
         set:
            method: PUT
            request: { $ref: '#/resources/info' }
            response: { $ref: '#/resources/info' }

         get_text:
            method: GET
            path: "$/books/{bookid}/chapter/{num}/text"
            response: { type: string }

         set_text:
            method: PUT
            path: "$/books/{bookid}/chapter/{num}/text"
            request: { type: string }
            response: { type: string }

      relations:
         book:
            resource: '#/resources/book'
            vars: { id: "0/bookid" }
